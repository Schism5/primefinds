{"version":3,"sources":["UtilCard.js","App.js","serviceWorker.js","index.js"],"names":["UtilCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFocus","event","state","percent","setState","handleBlur","setPer","handleChange","value","target","length","o","v","parseInt","pkey","Number","toFixed","setPercentages","bind","assertThisInitialized","react_default","a","createElement","Card_default","style","width","padding","marginTop","display","TextField_default","onChange","verticalAlign","inputProps","onFocus","onBlur","marginRight","color","fontWeight","type","float","amount","Component","App","onePercent","twoPercent","threePercent","fourPercent","errorMsg","calculate","name","first","secon","third","forth","one","String","split","two","three","four","backgroundColor","height","id","label","margin","variant","src_UtilCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b004787.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\nclass UtilCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      percent: props.percent\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n\n  render() {\n    return (\n      <Card style={{width:'250px', padding:'17px', marginTop:'15px'}}>\n        <div style={{display:'inline-block', width:'30px'}}>\n          <TextField\n            value={this.state.percent}\n            onChange={this.handleChange()}\n            style={{display:'inline-block', verticalAlign:'middle', width:'30px'}}\n            inputProps={{\n              style:{padding:'2px'}\n            }}\n            onFocus={this.handleFocus()}\n            onBlur={this.handleBlur()}\n          />\n        </div>\n        <span style={{verticalAlign:'middle', marginRight:'20px'}}>%</span>\n        <div style={{color:'#3f51b5', fontWeight:'600', display:'inline-block', verticalAlign:'middle'}}>{this.props.type}</div>\n        <div style={{display:'inline-block', float:'right', marginTop:'3px'}}>{this.props.amount}</div>\n      </Card>\n    );\n  }\n\n  handleFocus = () => event => {\n    if(this.state.percent === '0') {\n      this.setState({\n        percent: ''\n      });\n    }\n  }\n\n  handleBlur = () => event => {\n    if(this.state.percent === '') {\n      this.setState({\n        percent: '0'\n      }, this.setPer);\n    }\n  }\n\n  handleChange = () => event => {\n    const value = event.target.value;\n\n    if(value.length <= 3) {\n      this.setState({\n        percent: value\n      }, this.setPer);\n    }\n  }\n\n  setPer = () => {\n    let o = {};\n    let v = parseInt(this.state.percent) || 0;\n\n    o[this.props.pkey] = Number((v / 100).toFixed(2));\n    this.props.setPercentages(o);\n  }\n}\n\nexport default UtilCard;","import React, { Component } from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport UtilCard from './UtilCard.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      one: '$0',\n      two: '$0',\n      three: '$0',\n      four: '$0',\n      onePercent: 0.25,\n      twoPercent: 0.4,\n      threePercent: 0.2,\n      fourPercent: 0.15,\n      errorMsg: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.calculate = this.calculate.bind(this);\n    this.setPercentages = this.setPercentages.bind(this);\n  }\n\n  render() {\n    return (\n      <div style={{backgroundColor:'#d7dae2', height:'95vh', padding:'20px'}}>\n        <TextField\n            id=\"outlined-name\"\n            label=\"Dollar Amount\"\n            value={this.state.name}\n            onChange={this.handleChange()}\n            margin=\"normal\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            style={{width:'220px'}}\n          />\n        \n        <div style={{marginTop:'25px'}}>\n          <UtilCard type=\"Office\" percent=\"25\" amount={this.state.one}   setPercentages={this.setPercentages} pkey=\"onePercent\"  />\n          <UtilCard type=\"House\"  percent=\"40\" amount={this.state.two}   setPercentages={this.setPercentages} pkey=\"twoPercent\"  />\n          <UtilCard type=\"Other\"  percent=\"20\" amount={this.state.three} setPercentages={this.setPercentages} pkey=\"threePercent\"/>\n          <UtilCard type=\"Other\"  percent=\"15\" amount={this.state.four}  setPercentages={this.setPercentages} pkey=\"fourPercent\" />\n        </div>\n\n        <div style={{color:'red', marginTop:'20px'}}>{this.state.errorMsg}</div>\n      </div>\n    );\n  }\n\n  setPercentages = (o) => {\n    this.setState(o, () => {\n      if(this.state.onePercent + this.state.twoPercent + this.state.threePercent + this.state.fourPercent !== 1) {\n        this.setState({errorMsg: \"Percentages don't add up to 100\"});\n      }\n      else {\n        this.setState({errorMsg: \"\"});\n      }\n\n      this.calculate(Number(this.state.name));\n    });\n  };\n\n  calculate = (amount) => {\n    let first = amount * this.state.onePercent;\n    let secon = amount * this.state.twoPercent;\n    let third = amount * this.state.threePercent;\n    let forth = amount * this.state.fourPercent;\n\n    this.setState({\n      one:  '$' + (String(first).split('.')[1] ? first.toFixed(2) : first),\n      two:  '$' + (String(secon).split('.')[1] ? secon.toFixed(2) : secon),\n      three:'$' + (String(third).split('.')[1] ? third.toFixed(2) : third),\n      four: '$' + (String(forth).split('.')[1] ? forth.toFixed(2) : forth)\n    });\n  };\n\n  handleChange = () => event => {\n    this.setState({\n      name: event.target.value\n    });\n\n    this.calculate(Number(event.target.value));\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}